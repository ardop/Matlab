clc;

initial_theta = [0 pi/2 pi/2 0 0];
theta_a = initial_theta;
figure;
fk_coord_plot(initial_theta);
initialize_axes();

pxa = -35;
pxb = 10;
pya = 10;
pyb = 43;
pza = 0;
pzb = 25;

while(true)
    
    in = input('Enter the first and second end-effector coordinate values.\n1: Linear joint control.\nEnter q to quit.\n', 's');
    if in=='q'
        break
        
    else
        in = strsplit(in);
        target = str2double(in);
        target1 = target(1:3);
        target2 = target(4:6);
        mode = target(7);
        
        disp(mode);
        
        % First we move to target 1
        
        theta_a = move_to_target(target1, theta_a);
        theta_a = round(theta_a, 2);
        
        % Motion according to the modes
        if(mode==1)
            
            %Linear motion of joint angles.
            %First the joint angles for the second coordinate is calculated
            
            theta_b = ik_pseudo_inverse(target2');
            theta_b = round(theta_b, 2);
            
            theta_c = theta_a;
            
            delta = 0.1; %Linear change
            
            while true
                
                flag = 0;
                
                for i=1:5
                    
                    if(theta_a(i)<theta_b(i))
                        
                        theta_c(i) = theta_a(i) + delta;
                        
                    elseif (theta_a(i)<theta_b(i))
                            
                            theta_c(i) = theta_a(i) - delta;
                    else
                        % Equal
                        flag = flag + 1; %Count the number of angles that are equal
                        
                    end
                end
                
                if(flag==5)
                    break
                else
                    
                          
                            
                    
                    
            

            
            
            
            
            
            
            
        end
        
%         % Now we move from target 1 to target 2 in straight lines
%         
%         delta = (target2-target1)/10;
%         
%         for ii=1:10
%             theta_a = move_to_target(target1+ii*delta, theta_a');
%         end
        
        
        
        
        
%         theta_a = move_to_target(target, theta_a);  
         
    end   
end

close all;
        
        
        

    
    
